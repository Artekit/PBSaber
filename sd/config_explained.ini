# ******************************************************************************
# PBSaber configuration file
#
# PBSaber manual:
# https://www.artekit.eu/doc/guides/propboard-pbsaber/
#
# Artekit PropBoard:
# https://www.artekit.eu/products/devboards/propboard/
#
# ******************************************************************************

# This is the main configuration file for the PBSaber. Here you'll define
# every aspect of your lightsaber and the lightsaber behaviour.
#
# This files i intended to be used as a starting point and thus, it's full of
# comments. Once you have mastered all the meanings and settings you can get rid
# of these comments by deleting lines starting with the # sign, or you add
# comments as you please.
#
# Although this configuration file makes some assumptions (like the used fonts,
# blade type, etc), you can still use this file as the configuration file of the
# PBSaber. If you are going to copy this file into the SD, remember to rename it
# as config.ini.
#
# To see/edit this file it's recommended to use a good text editor, like
# Notepad++, that has a color highlighting and "folding" features. With
# fold/unfold you can compress this INI file (alt + 0) to have quick view of the
# sections defined and expand and edit the ones you are interested in, or expand
# them all (alt + shift + 0).
#

[hardware]
# ==============================================================================
# Main hardware configuration section.
# This section holds the main hardware settings for your prop. It defines the
# type of blade (High-Brightness LED or pixel), LED configuration, quantity of
# LEDs, buttons, etc. 
# ==============================================================================

# The following defines the type of blade installed. It can be:
# - hbled: for high-brightness LEDs (i.e. CREE XPE2)
# - pixel: for strips of addressable LEDs (a.k.a. neopixels)
blade_type = pixel

# Here it's defined the maximum current in mA the HBLEDs can withstand. This
# value is valid only if blade_type = hbled. For example, a value of
# 700,1000,800 means that the output 1 will use a maximum of 700mA, output 2
# will use a maximum of 1000mA and output 3 will use a maximum of 800mA.
hbled_current = 700,700,700

# Type of LED strip. Valid only when blade_type = pixel. It can be one of
# the following values:
# - apa102: for APA102 or APA102C
# - ws2812: for WS2812 or WS2812B
# - sk6812rgbw: for SK6812RGBW
pixel_type = ws2812

# Quantity of LEDs in the LED strip. Valid only when blade_type = pixel
pixel_count = 133

# This indicates on which pad you have connected the On/Off button.
onoff_button_pad = 2

# If you have connected the button to 3.3V, set this value to 'high',
# otherwise set it to 'low'.
onoff_button_pol = low

# This indicates on which pad you have connected the FX button. It is not 
# mandatory. If you don't use an FX button, leave it empty.
fx_button_pad = 3

# If you have connected the FX button to 3.3V, set this value to 'high',
# otherwise set it to 'low'. If you don't use an FX button, leave it empty.
fx_button_pol = low

[settings]
# ==============================================================================
# General settings section
# ==============================================================================

# The initial profile number. On power-up the PBSaber will try to load this
# profile as the default profile. Leave it to '0' or empty to load profile1.
# This value will be updated automatically if the update_initial_profile values
# is set to 'yes'. Read here below about the update_initial_profile value.
initial_profile = 0

# If you want the PBSaber to remember the last used profile, set the following
# value to 'yes', otherwise set it to 'no'. If set to 'yes', every time the
# PBSaber does a 'retraction' it will save the profile number it's currently
# using into the initial_profile value up here (if changed), so the next time
# you power-up the saber, it will start from the last used profile.
update_initial_profile = yes

# How many profiles there are in this configuration file? If you set this value
# to zero, the PBSaber will autodetect the quantity.
profile_count = 0

# Master volume in dB, between -100 and 12. Set to 0 for the default volume.
master_volume = -5

# The following value determines after how many seconds without user activity
# the PBSaber will enter into low-power mode. Set to zero to disable the
# low-power mode.
low_power = 0

# The audio_fs value sets the audio frequency and must match the audio
# frequency of ALL your fonts. Can be 22050, 32000, 44100, 48000 or 96000.
audio_fs = 22050

# Swing sensitivity from 1 to 5, being 5 the most sensitive.
swing_sensitivity = 3

# Clash sensitivity from 1 to 5, being 5 the most sensitive.
clash_sensitivity = 3

# Swing limiter. The minimum time (in milliseconds) that has to pass before
# being able to trigger another swing effect.
swing_limiter = 300

# Clash limiter. The minimum time (in milliseconds) that has to pass before
# being able to trigger another clash effect.
clash_limiter = 300

# Spin limiter. The minimum time (in milliseconds) that has to pass before
# being able to trigger another spin effect.
spin_limiter = 300

# Typical button debounce time in milliseconds. Optional, and will be set to 25
# if it's zero or not present.
button_debounce =

# Hold time in milliseconds for the On/Off button. This hold time is used for
# triggering several features, like rectraction, profile selection cycle, etc.
off_button_time = 1000

# Hold time in ms for the FX button to start a lock-up effect.
lock_button_time = 500

# The folder where there should be utility sound files, like the beep used when
# changing profiles.
sound_utils = sndutil

# By setting the following two values to 'yes' the PBSaber will dump information
# about the profile and/or font respectively to, the serial monitor. The
# information will be output every time a new profile or font is loaded. Useful
# to understand why something is not working as expected.
dump_profile_info = yes
dump_font_info = yes

[font1]
# ==============================================================================
# Font information
# ==============================================================================
# Here you'll define where are located your font files, their file names and
# other information. You can define as many fonts as you want. Every font is
# defined in a dedicated section, called "font" plus a number, like the one we
# are inside now (font1). Later, you will reference the fonts by this number
# from the profiles you'll define.

# Title, this is optional.
title = My font

# The full path for the font files. This font, for example, is inside the MyFont
# folder, that is insider the 'fonts' folder.
folder = \fonts\MyFont

# If the font is a polyphonic font, set the following to 'yes', otherwise set
# it to 'no'.
poly = no

# The following values determine how the font files are named. Usually there is
# a base name (i.e 'swing') followed by a number. Here you'll define those names
# for every type of sound effect file. The names are pretty indicative of what
# they do, but let's take for example a font that has 4 'boot' sounds, from
# boot1.wav to boot4.wav. In that case we say that the boot file name starts
# with 'boot'...
boot = boot

# ... that goes from '1' (boot1.wav) up to '4' (boot4.wav)
boot_min_max = 1,4

# For single sound files you must leave the min_max value empty. This is
# typically the case of a 'hum' sound:
hum = hum
hum_min_max = 

# Currently the PBSaber doesn't have a limit on how many files you can use
# for every sound effect type. For example, you can have from swing1.wav to
# swing10000.wav if you like. What are not yet supported are filenames using
# numbers preceeded by zeroes, for example, banks with filenames like 'swing01'
# to 'swing16'. In this case you'll have to rename those files to remove the
# preceding zero.

# Now for the 'ignition' sound, and for the rest it could be:
ignition = poweron
ignition_min_max = 1,5

# Retraction
retraction = poweroff
off_min_max = 1,2

# Going into low power
power_down =
power_down_min_max =

# Blaster
blaster = blaster
blaster_min_max = 1,4

# Lock-up
lock = lockup
lock_min_max =

# Swing
swing = swing
swing_min_max = 1,16

# Clash
clash = clash
clash_min_max = 1,16

# Spin
spin = spin
spin_min_max = 1,4

# Stab
stab = stab
stab_min_max = 1,4

# Force
force = force
force_min_max = 1,2

# Background music
background =
background_min_max = 

# Font name
name = font

[font2]
# Now let's define a second font (font2). Here we can use the 'as_font' value
# to say that this font uses the same file naming scheme as 'font1' (that is,
# the names of the files are the same, like swing1.wav). We have to indicate
# though that this font is actually stored in another folder. This is useful to
# not redefine all the values again.
title = My Second Font
folder = \fonts\MySecondFont
poly = no
as_font = 1

# While using the 'as_font' value, we can still override whatever font setting
# we want. For example, if 'font1' has 16 swing sounds but this font has 18, we
# can override the swing_min_max value.
swing_min_max = 1,18

# Using the 'as_font' value is optional. You can redefine all the values for
# every font if you want.

[profile1]
# ==============================================================================
# User profiles
# ==============================================================================
# Here you'll define your profiles, that is, how the saber will behave, the
# colors, the font it will use. You can define as many profiles as you want and
# personalize the PBSaber behavior as you wish.
#
# There must be at least one defined profile, that is, 'profile1', the one we
# are defining here. Profile names have to be consecutive (there cannot be
# profile1, profile2 and profile5).

# The font number for this profile. This profile uses 'font1'.
font = 1

# Ignition mode. Can be one of the following values:
# - ramp: brightness ramp, while shimmering.
# - full: super fast (50ms) brightness ramp.
# - scroll: only for pixel blades. A progressive, scrolling ignition just as in
#   the movies.
ignition_mode = scroll

# Duration of the ignition effect, in ms. If left to 0, then the duration will
# be the same as the duration of the ignition sound.
ignition_duration = 500

# Retraction mode. Same as ignition_mode but for retraction.
retraction_mode = scroll

# Duration of the retraction effect. Same as ignition_duration but for
# retraction.
retraction_duration = 0

# The shimmering mode. Can be one of the following values.
# - pulse: pulsating effect (brightness ramp-up/ramp-down).
# - random: uses random brightness values.
shimmer_mode = random

# The following value sets the shimmering color. If you are using an RGB LED
# or a pixel strip, then it is an RGB color. If you are using an RGBW pixel
# strip, you can indicate a fourth value for the white color. If you are using
# a custom HBLED, then it indicates the value for every LED output (1, 2, and 3
# respectively).
shimmer_color = 247,31,26

# Brightness depth of the shimmering effect. It's a value from 0 to 100 percent.
# A depth equal to 10 means that the shimmer brightness will variate between 90%
# and 100%. A depth equalt to 100 means that the shimmer brightness will variate
# between 0% and 100%.
shimmer_depth = 10

# The frequency of the shimmering effect, in Hz. Maximum 25Hz.
shimmer_freq = 20

# Clash effect mode. It can be one of the following values:
# - static: a static color.
# - shimmer: shimmering effect on top of the base shimmering.
# - flash: flash effect between the background (shimmering) color and a color
#   defined with clash_color.
# - flash_flicker: same as flash, but it will choose a random brightness
#   between 50% and 100% for clash_color, giving the impression it's flickering.
# - big_spark: only for pixel strips. It does a fast (20ms) flash followed by
#   a big spark in the middle of the blade.
clash_mode = flash_flicker 

# Clash color.
clash_color = 255,255,255

# Clash randomness. If clash_mode = big_spark and set to 'yes' then a random
# color will be used for the big_spark. If clash_mode = shimmer then by
# setting this values to 'yes' will do a random brightness shimmering, otherwise
# it will do a pulsating shimmering.
clash_random =

# How much the clash_color will be mixed with the background shimmering color,
# in percent. A value of 100 means that the clash_color will completely override
# the background shimmering color. A value of 75 means that the resulting color
# will be a mix of 75% clash_color and 25% background shimmering color.
# If clash_mode = big_spark then this value is ignored.
clash_blend = 75

# Frequency of the clash effect in Hz. Valid only with clash_effect = shimmer, 
# flash or flash_flicker.
clash_freq = 25

# Brightness depth of the clash effect, from 0 to 100 percent. See the
# description for shimmer_depth. Valid only when clash_mode = shimmer.
clash_depth = 100

# Duration of the clash effect in ms. Set to 0 to use the duration of the audio
# file for the clash effect.
clash_duration = 80

# Blaster effect mode. It can be one of the following values:
# - static: see the description for clash_mode.
# - shimmer: see the description for clash_mode.
# - flash: see the description for clash_mode.
# - flash_flicker: see the description for clash_mode.
# - spark: only for pixel blades. Does small sparks with configurable color
#   size, and duration.
# - flash_spark: same as 'spark' but it does in the meantime a quick (20ms)
#   flash of the same color of the spark.
blaster_mode = static

# Color of the blaster effect.
blaster_color = 255,255,255

# Blaster randomness. When blaster_mode = spark or flash_spark, setting this
# to 'yes' will use a random color for the 'sparks'. If blaster_mode = shimmer
# then by setting this values to 'yes' will do a random brightness shimmering,
# otherwise it will do a pulsating shimmering.
blaster_random =

# How much the blaster_color will mix with the background shimmering color, in
# percent. See the description for clash_blend. This value is ignored if
# blaster_mode = spark or flash_spark.
blaster_blend = 75

# Frequency of the blaster effect in Hz. Valid only for blaster_mode = shimmer,
# flash and flash_flicker. Maximum 25 Hz.
blaster_freq =

# Blaster depth. If blaster_mode = shimmer, then it's the depth of the
# shimmering, much like shimmer_depth for the base shimmering. If blaster_mode =
# spark or flash_spark, then it's the size of the sparks in pixels. If
# left to 0, then the sparks will have a random size between 10 and 20 pixels.
blaster_depth =

# Duration of the blaster effect. If empty or left to 0, then the blaster effect
# will last as long as the audio file played for the blaster.
blaster_duration = 80

# Stab effect mode. It can be one of the following values:
# - static: see the description for clash_mode.
# - shimmer: see the description for clash_mode.
# - flash: see the description for clash_mode.
# - flash_flicker: see the description for clash_mode.
# - tip_spark: only for pixel blades. Does a spark in the tip of the blade
#   with configurable color, size, and duration.
stab_mode = tip_spark

# Color of the stab effect
stab_color = 255,255,255

# Stab randomness. If stab_mode = tip_spark then by setting this to 'yes' a 
# random color will be used for the tip_spark. If stab_mode = shimmer then by
# setting this to 'yes' will do a random brightness shimmering will be used,
# otherwise it will do a 'pulsating' shimmering.
stab_random = no

# How much the stab_color will be mixed with the background shimmering color, in
# percent. See the description for clash_blend. It has no effect if stab_mode =
# tip_spark.
stab_blend =

# Frequency of the stab effect in Hz. Valid only for stab_mode = shimmer, flash
# and flash_flicker. Maximum 25 Hz.
stab_freq =

# Stab depth. If stab_mode = shimmer, then it's the depth of the shimmering,
# much like shimmer_depth for the base shimmering. If blaster_mode = tip_spark
# then it's the size of the sparks in pixels.
stab_depth = 40

# Duration in milliseconds of the stab effect. If empty or left to 0, then the
# stab effect will last as long as the audio file played for the stab.
stab_duration = 80

# Lock-up effect mode. It can be one of the following values:
# - shimmer: see the description for clash_mode.
# - flash: see the description for clash_mode.
# - flash_flicker: see the description for clash_mode.
lockup_mode = flash_flicker

# Color of the lock-up effect
lockup_color = 255,255,255

# Lock-up randomness. If lockup_mode = shimmer then by setting this to 'yes'
# will do a random brightness shimmering, otherwise it will do a 'pulsating'
# shimmering.
lockup_random = no

# How much the lockup_color will be mixed with the background shimmering color,
# in percent. See the description for clash_blend.
lockup_blend =

# Frequency of the lock-up effect in Hz. Maximum 25 Hz.
lockup_freq =

# Lock-up depth. If lockup_mode = shimmer, then it's the depth of the
# shimmering, much like shimmer_depth for the base shimmering. 
lockup_depth = 40

[profile2]
# Now let's create profile2. Just like the as_font value for fonts, there is the
# as_profile value for profiles. By using the as_profile value, the profile can
# take all the values from another profile, while letting you override some (or
# all) of the inherited values. Practical example: let's say that profile2
# should be indentical to profile1 (same font, same clash, blaster, stab and
# lockup effects) but with a different shimmering. In this case you can indicate
# that this profile is just like profile1 by doing...
as_profile = 1

# ... and then change the parameters as you like.
shimmer_color = 20,225,54
shimmer_mode = pulse
shimmer_depth = 20
shimmer_freq = 25

# Of course, using as_profile is optional and it's up to you if you want to
# redefine all the settings of a profile or just inherit settings from another
# profile and make changes on top of it.
